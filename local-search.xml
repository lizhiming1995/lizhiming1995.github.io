<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo+Github搭建个人博客</title>
    <link href="/2022/11/30/hexo-github-blog/"/>
    <url>/2022/11/30/hexo-github-blog/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为程序猿，相信大家都有过这样一个想法，搭建属于自己的博客网站，在上面写写技术文章，记录生活点滴，坚持下去会发现这是一件很有成就感的事情。最近刚好在学习这部分内容，深入进去后发现里面坑很多，为了节省大家的时间，少走一点弯路，我整理出了这篇文章供大家参考。</p><span id="more"></span><h2 id="为什么选择Hexo"><a href="#为什么选择Hexo" class="headerlink" title="为什么选择Hexo"></a>为什么选择Hexo</h2><p>之前在网上搜了一下目前比较流行的静态博客框架，最后目标锁定在Jekyll和Hexo上，两者都支持Markdown语法，这点我很喜欢，Jekyll基于Ruby实现，安装Jekyll需要搭建Ruby环境，而Hexo基于NodeJs实现，在Windows上安装NodeJs开发环境比Ruby简单，另外Hexo的主题相对来说更符合我的审美，所以最终选择了Hexo。</p><p>什么是Hexo？官网对它的介绍是：</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>推荐下载LTS版本的msi文件，默认64-bit，也可根据自己的Windows版本选择32-bit。</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-564ebd42c67b389b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>保持默认设置即可，一路Next。安装完成后打开命令行窗口，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ node -v<br>$ npm -v<br></code></pre></td></tr></table></figure><p>结果如下图所示，则说明安装正确，可以进行下一步，如果不正确，请回头检查自己的安装过程。</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-4e79ce881b91e08d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-f4da3cd2b1b6b3de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>保持默认设置即可，一路Next。安装完成后打开命令行窗口，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git --version<br></code></pre></td></tr></table></figure><p>结果如下图所示，则说明安装正确，可以进行下一步，如果不正确，请回头检查自己的安装过程。</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-dc21bbd520de438f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h3><p>第一步，注册一个github账号，记得点击邮箱中的验证链接，注册地址：<a href="https://github.com/">https://github.com</a></p><p>第二步，生成SSH keys</p><p>什么是ssh：ssh是Secure Shell（安全外壳协议）的缩写，建立在应用层和传输层基础上的安全协议。为了便于访问github，要生成ssh公钥，这样就不用每一次访问github都要输入用户名和密码。</p><p>1.本地成功安装git后，单击鼠标右键，选择Git Bash Here，打开git bash。</p><p>2.输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;xxx@xxx.com&quot;</span><br></code></pre></td></tr></table></figure><p>引号中的内容是你在github上的注册邮箱，之后一路回车，结果如图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-f7ae479d68598060.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>3.上一步已经成功的生成了ssh key，接下来输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;ssh-agent -s&quot;</span><br></code></pre></td></tr></table></figure><p>然后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>这一步可能会报错：<code>Could not open a connection to your authentication agent</code> ，这时直接输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-agent bash<br></code></pre></td></tr></table></figure><p>再次输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>结果如图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-07a1fab57cf11def.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>4.用cat命令查看key的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>选中内容，右键复制备用，如图：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-07ecd50b31aa131f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>第三步，配置SSH keys</p><p>打开github页面，找到setting中的ssh keys，点击新增按钮，输入任意的title，将刚才复制的key粘贴进去保存即可。</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-f842d7ce953ce978.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-6c5aa6548c2a4837.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-cf76845896097651.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>第四步，测试</p><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-72f9f1bc5708513f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>到这里为止，准备工作就全部完成了。</p><h2 id="Hexo的安装与配置"><a href="#Hexo的安装与配置" class="headerlink" title="Hexo的安装与配置"></a>Hexo的安装与配置</h2><p>第一步，安装Hexo</p><p>打开命令行窗口，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装完成后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo version<br></code></pre></td></tr></table></figure><p>结果如下图所示，则说明安装正确。</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-0fedb304ed110540.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>如果报错：<code>&#39;hexo&#39;不是内部或外部命令，也不是可运行的程序或批处理文件</code> ，则需要检查环境变量配置是否正确，如下图所示，编辑Path变量值，在结尾处加上：<code>C:\Program Files\nodejs\node_global;</code>（文件hexo.cmd所在目录）</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-4bf0592e51150553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>第二步，初始化Hexo</p><p>进入任意目录，比如F盘，然后指定一个文件夹名，这里以blog为例，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init blog<br></code></pre></td></tr></table></figure><p>结果如下图所示，F盘下会多出一个blog文件夹：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-56b5f612c14f53b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>接下来进入blog目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> blog<br></code></pre></td></tr></table></figure><p>第三步，安装必要的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install<br></code></pre></td></tr></table></figure><p>第四步，生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>该命令的简写形式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br></code></pre></td></tr></table></figure><p>执行完毕后会在blog目录下生成一个public文件夹，里面包含了博客网站的所有静态资源。</p><p>第五步，启动服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>该命令的简写形式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br></code></pre></td></tr></table></figure><p>默认情况下，访问地址为：<a href="http://localhost:4000/">http://localhost:4000/</a></p><p>另外也可以指定端口（比如8000）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s -p 8000<br></code></pre></td></tr></table></figure><p>第六步，验证</p><p>在浏览器中打开上面的地址，你将会看到：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-6b0b7249dac9c97c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>到这里为止，Hexo的安装与相关配置就全部完成了。</p><h2 id="将Hexo与Github-Pages联系起来"><a href="#将Hexo与Github-Pages联系起来" class="headerlink" title="将Hexo与Github Pages联系起来"></a>将Hexo与Github Pages联系起来</h2><p>第一步，创建代码库</p><p>1.登录github，点击页面右上角的加号，选择New repository</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-0d5252e96246729b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>2.在Repository name中填写 <code>yourname.github.io</code> ，注意这里的yourname指的是你的github用户名，如果你的名字是kirito，那就填 <code>kirito.github.io</code> ，Description中可以填一些简单的描述，不写也没关系，然后点击Create repository</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-48a0a57e399a5728.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>3.正确创建之后，你会看到如下界面：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-5bad9400e38715e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>第二步，编辑站点配置文件</p><p>打开blog目录下的_config.yml文件，编辑deploy模块，内容如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:lizhiming1995/yourname.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>注意这里的repo地址应该换成你第一步创建的代码库的地址。</p><p>第三步，安装一个扩展</p><p>进入blog目录，打开命令行窗口，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>安装完成后，就可以一键部署到github上了。</p><p>第四步，部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>该命令的简写形式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br></code></pre></td></tr></table></figure><p>执行结果如图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-1fd589e356f7ebed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这样你public目录下的静态文件就上传到你的代码库中了。</p><p>第五步，激活GitHub Pages</p><p>打开代码库的Settings页面，找到GitHub Pages，选择master branch，然后点击Save按钮，如图：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-e13f4223578ef8c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-8560de95a8daf1b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>最后会提示你：<code>Your site is ready to be published at http://yourname.github.io/</code></p><p>这就是你的博客地址了，任何人都可以访问哦。</p><h2 id="绑定自己的域名"><a href="#绑定自己的域名" class="headerlink" title="绑定自己的域名"></a>绑定自己的域名</h2><p>第一步，在万网、腾讯云、阿里云等提供域名注册的域名服务商处购买一个域名，这里以阿里云为例，购买地址：<a href="https://wanwang.aliyun.com/">https://wanwang.aliyun.com/</a></p><p>第二步，打开控制台，给域名添加DNS解析</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-af67e59d7e77fd93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-cd9def2741c1390d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>添加两条解析记录，记录类型为CNAME，主机记录分别填@和www，记录值填之前GitHub Pages提供的域名，注意没有http的前缀，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-ca2c53b50e3c22a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-e66597c0729804fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>添加完后别人用www和不用www都能访问你的网站。</p><p>第三步，在blog目录的source文件夹下创建一个CNAME文件，记住不要有文件后缀名，编辑CNAME文件，里面写你购买的域名，例如 <code>yourname.com</code> ，记住不要有www，创建完成后每一次执行 <code>hexo g</code> 都会在public文件夹下生成CNAME文件，方便后面的部署</p><p>第四步，在blog目录下打开命令行窗口，运行 <code>hexo g</code> ，再运行 <code>hexo d</code></p><p>第五步，在浏览器输入你购买的域名，你会发现该域名已经指向了你在github上的博客地址</p><p>注意：设置域名解析需要几分钟的时间，若完成以上步骤依然无法访问，请过几分钟再尝试</p><h2 id="Hexo入门"><a href="#Hexo入门" class="headerlink" title="Hexo入门"></a>Hexo入门</h2><p>我们先来看一下blog的目录结构：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">+ blog<br>  + public        <span class="hljs-regexp">//</span>静态资源文件夹，内容会推送到代码库<br>  + scaffolds     <span class="hljs-regexp">//</span>模板文件夹，新建文章时，Hexo会根据模板来建立文件<br>  + source        <span class="hljs-regexp">//</span>资源文件夹，Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去<br>  + themes        <span class="hljs-regexp">//</span>主题文件夹，Hexo会根据主题来生成静态页面<br>  - _config.yml   <span class="hljs-regexp">//</span>网站的配置信息，可以在此配置大部分的参数<br>  - package.json  <span class="hljs-regexp">//</span>应用程序的信息和依赖关系<br></code></pre></td></tr></table></figure><p>方便起见，我们把网站的语言设置为中文，编辑blog目录下的_config.yml文件，将language这一项设置为 <code>language: zh-CN</code>（参考blog&#x2F;themes&#x2F;landscape&#x2F;languages目录），将url这一项设置为 <code>url: http://yourname.com</code>（你购买的域名，若未购买可以用 <code>http://yourname.github.io</code> 代替），其他配置项请根据自己的需要进行设置。</p><p>接下来新建一篇文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new [layout] &lt;title&gt;<br><br></code></pre></td></tr></table></figure><p>layout可选值有：draft（草稿）、page（页面）、post（文章），对应模板文件夹中的3个文件，如果没有设置layout的话，默认使用_config.yml中的default_layout参数（默认值post）代替。若标题包含空格，请使用引号括起来。</p><p>现在，我们来新建一篇名为test的文章，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>结果在source&#x2F;_posts目录下生成了test.md文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2018-06-23 19:14:56</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>这里给出Front-matter的概念，Front-matter是文件最上方以 <code>---</code> 分隔的区域，用于指定文件的变量。</p><p>常见参数：title（标题）、date（创建日期）、tags（标签）、categories（分类），只有文章（post）支持标签和分类参数，建议文章分类只写一个，标签可以有多个，写法为 <code>tags: [tag1,tag2,tag3]</code> ，注意每个参数的冒号后面都应该有一个空格，这一点同样体现在_config.yml文件中</p><p>编辑test.md文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2018-06-23 19:14:56</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">tag1</span>,<span class="hljs-string">tag2</span>,<span class="hljs-string">tag3</span>]<br><span class="hljs-attr">categories:</span> <span class="hljs-string">java</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">文章正文</span><br></code></pre></td></tr></table></figure><p>保存后刷新页面，通常情况下页面会自动更新，若修改没有生效，则需要重新执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br>$ hexo s<br></code></pre></td></tr></table></figure><p>这里再介绍一个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br></code></pre></td></tr></table></figure><p>它的作用是清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况下（尤其是更换主题后），如果你发现对站点的更改无论如何也不生效，你可能需要运行该命令。</p><p>打开网站首页，你会看到刚才设置的标签和分类生效了：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-0f473f272d12d06c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>发现Hello World这篇文章的内容被折叠起来了吗，很简单，只需要在文章正文合适的地方加上下面这行代码就搞定了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><p>菜单栏只有Home和Archives？没关系，我们可以加个页面（page），这里以about为例，在blog目录下打开命令行窗口，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page about<br></code></pre></td></tr></table></figure><p>结果会在source目录下生成about文件夹，里面包含一个index.md文件，文件内容就是about页面的内容。</p><p>还没有结束，编辑blog&#x2F;themes&#x2F;landscape目录下的_config.yml文件，修改menu的配置为：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">menu</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">首页</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/</span><br>  <span class="hljs-attribute">归档</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/archives</span><br>  <span class="hljs-attribute">关于</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/about</span><br></code></pre></td></tr></table></figure><p>保存刷新页面，你会看到导航栏里多了“关于”，点进去就是about页面啦，目前只有一个标题，内容待编辑，注意页面是不支持设置标签和分类的，只有文章才支持。</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-b363ff76c747ecdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>最后，我们来总结一下发布文章的流程：</p><p>第一步，<code>hexo new &lt;title&gt;</code> 生成一篇文章，这里的title指文件名，不建议使用中文</p><p>第二步，编辑文章，修改title、tags等参数，这里的title指文章标题，可以使用中文</p><p>第三步，<code>hexo s</code> 本地预览效果，不满意继续修改</p><p>第四步，<code>hexo g</code> 生成静态文件</p><p>第五步，<code>hexo d</code> 将静态文件推送至代码库</p><p>第四步和第五步可以合并成一条命令，<code>hexo d -g</code> ，表示部署之前预先生成静态文件。修改配置与发布文章的流程相似，最后都需要执行第三四五步。</p><h2 id="Hexo进阶"><a href="#Hexo进阶" class="headerlink" title="Hexo进阶"></a>Hexo进阶</h2><h3 id="添加RSS订阅功能"><a href="#添加RSS订阅功能" class="headerlink" title="添加RSS订阅功能"></a>添加RSS订阅功能</h3><p>RSS是在线共享内容的一种简易方式，也叫简易信息聚合，全称Really Simple Syndication。当网站内容更新时，可以通过订阅RSS源在RSS阅读器上获取更新的信息，大多数的内容提供网站都会提供RSS订阅功能，方便用户去获取最新的内容。</p><p>1.安装feed插件</p><p>Hexo有一个专门生成RSS文件的插件 <code>hexo-generator-feed</code> ，进入blog目录，打开命令行窗口，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-generator-feed --save<br></code></pre></td></tr></table></figure><p>2.启用插件</p><p>编辑blog目录下的_config.yml文件，添加如下内容：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># Extensions</span><br><span class="hljs-attribute">Plugins</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo-generator-feed</span><br><span class="hljs-comment"># Feed Atom</span><br><span class="hljs-attribute">feed</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">atom</span><br>  <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">atom.xml</span><br>  <span class="hljs-attribute">limit</span><span class="hljs-punctuation">:</span> <span class="hljs-string">20</span><br></code></pre></td></tr></table></figure><p>3.生成RSS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br></code></pre></td></tr></table></figure><p>如果生成了atom.xml就表示成功了：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-9ee134a0ab0e1e8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>在浏览器中打开 <a href="http://localhost:4000/atom.xml">http://localhost:4000/atom.xml</a> ，你会看到订阅功能已开启：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-911d14af1a51b524.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>4.部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br></code></pre></td></tr></table></figure><p>5.使用RSS订阅功能</p><p>这里以Office的Outlook邮箱为例，订阅地址假设为 <code>http://spring2go.com/atom.xml</code>，如图：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-b2ae3742c9259516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-0d260cbc541724bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-f13ce759d0ea250a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h3><p>站点地图是一种文件，你可以通过该文件列出你网站上的网页，从而将你网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取你的网站。</p><p>1.安装sitemap插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-generator-sitemap --save<br>$ npm install hexo-generator-baidu-sitemap --save<br></code></pre></td></tr></table></figure><p>2.编辑blog目录下的_config.yml文件，添加如下内容：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Plugins</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo-generator-sitemap</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo-generator-baidu-sitemap</span><br><br><span class="hljs-attribute">sitemap</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sitemap.xml</span><br><br><span class="hljs-attribute">baidusitemap</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">baidusitemap.xml</span><br></code></pre></td></tr></table></figure><p>3.生成站点地图文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br></code></pre></td></tr></table></figure><p>如果生成了sitemap.xml和baidusitemap.xml就表示成功了：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-03e1d44d4e147584.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>4.部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br></code></pre></td></tr></table></figure><p>5.确认博客是否被收录</p><p>在百度或者谷歌输入下面格式的内容，如果能搜索到就说明被收录，否则未收录，可能需要等上一段时间。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">site:</span>xxx.com<br></code></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/9744795-46170f0a60ec0fa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="使用模板功能"><a href="#使用模板功能" class="headerlink" title="使用模板功能"></a>使用模板功能</h3><p>现在我们生成的每一篇新文章都只有title、date、tags三个参数，通常情况下我们还会有categories参数和一些自定义的参数（如何使用自定义参数我们后面讲），每次都要手动加上这些参数会浪费很多时间，这时候模板的作用就出来了。</p><p>打开scaffolds文件夹，你会看到里面有draft、page、post三个模板，对应草稿、页面、文章，我们日常使用最多的就是文章，所以这里以文章为例，其他两个模板请根据自己的需要进行修改。</p><p>模板的参数是可以设置默认值的，我们假设categories参数的默认值为 <code>随笔</code> ，然后自定义一个参数 <code>author</code> ，默认值为 <code>kirito</code> ，因为每篇文章的标签是不确定的，所以这里不进行设置，编辑post.md文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<br><span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<br><span class="hljs-attr">tags:</span> <br><span class="hljs-attr">categories:</span> <span class="hljs-string">随笔</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">kirito</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>让我们用模板生成一篇新文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new test2<br></code></pre></td></tr></table></figure><p>打开blog&#x2F;source&#x2F;_posts目录下的test2.md文件，可以看到以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">test2</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">随笔</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">kirito</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2018-06-27 22:02:33</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>接下来我们只需要写好文章，设置一下tags就可以发布了。</p><h3 id="使用自定义参数"><a href="#使用自定义参数" class="headerlink" title="使用自定义参数"></a>使用自定义参数</h3><p>文章参数里的title、date、categories和tags都在页面上有所展示，那我们自定义的参数该如何使用和展示呢？</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-3e9a5a6b889bb86b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>通过控制台我们可以看到，每篇文章都是一个 <code>class=&quot;article article-type-post&quot;</code> 的 <code>article</code> 标签，结构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;post-test&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article article-type-post&quot;</span> <span class="hljs-attr">itemscope</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">&quot;blogPost&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-meta&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/2018/06/23/test/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-date&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-category&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-inner&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-header&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-entry&quot;</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">&quot;articleBody&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-footer&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></td></tr></table></figure><p>title、date、categories和tags的值分别显示于article-header、article-date、article-category和article-footer，要使用自定义参数，我们需要修改主题的源文件，打开 <code>blog/themes/landscape/layout/_partial</code> 目录下的article.ejs文件，可以看到代码中的标签与class名都与上面一致，接下来我们让作者的名字显示在分类右边，编辑article-meta模块的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-meta&quot;</span>&gt;</span><br>    &lt;%- partial(&#x27;post/date&#x27;, &#123;class_name: &#x27;article-date&#x27;, date_format: null&#125;) %&gt;<br>    &lt;%- partial(&#x27;post/category&#x27;) %&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;letter-spacing:2px;color:#999;line-height:1em;&quot;</span>&gt;</span><br>        &lt;%- post.author %&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里为了方便直接将样式写在了div标签里，更好的做法是为div添加一个class，将样式写进 <code>landscape/source/css/_partial</code><br> 目录下的article.styl文件。当然，自定义标签可以用在其他地方，样式也可以根据你的喜好来定制。</p><p>让我们打开浏览器来看下效果，你会发现文章的自定义标签生效了：</p><p><img src="https://upload-images.jianshu.io/upload_images/9744795-5358af736b45e222.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>值得注意的是，我们刚才修改的文件是article.ejs，这是跟主题有关的，换一个主题，也许文件的路径和名字都变了，甚至格式也不再是ejs而是swig，不过修改文件的思路都是一样的，明确自己要修改哪一个模块，然后到主题的相关目录下，模仿源代码的语法进行修改，最后记住，源文件里使用Tab键会导致修改的代码无效或者报错，请使用空格。</p><h2 id="Hexo主题入门"><a href="#Hexo主题入门" class="headerlink" title="Hexo主题入门"></a>Hexo主题入门</h2><p>首先，你需要挑选一个自己喜欢的主题，地址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>打开主题示例网站后，你可以在页面底部或其他地方找到主题的git仓库地址。</p><p>然后将代码克隆到主题文件夹（themes）下，这里以Fluid主题为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> blog<br>$ git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid themes/fluid<br></code></pre></td></tr></table></figure><p>这里的blog应该替换成你的站点根目录。克隆完成后会在themes文件夹下生成一个fluid文件夹，里面就是主题的源代码了。</p><p>接下来启用fluid主题，编辑站点配置文件（根目录下的_config.yml），修改theme字段如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid<br></code></pre></td></tr></table></figure><p>在切换主题之后、验证之前，我们最好使用命令来清除Hexo的缓存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br></code></pre></td></tr></table></figure><p>然后启动Hexo本地站点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br></code></pre></td></tr></table></figure><p>启动完成后打开浏览器，可以看到主题配置已生效。</p><p>那么教程到这里就结束了，快来试试搭建自己的博客吧，有什么问题可以在评论区留言~</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
